const STOP_WORDS = new Set([
  'a',
  'an',
  'the',
  'and',
  'or',
  'but',
  'with',
  'of',
  'on',
  'in',
  'at',
  'to',
  'for',
  'from',
  'by',
  'is',
  'it',
  'this',
  'that',
  'these',
  'those',
  'as',
  'be',
  'was',
  'are',
  'were',
  'has',
  'have',
  'had',
  'will',
  'would',
  'can',
  'could',
  'should',
  'shall',
  'just',
  'very',
  'really',
  'so',
  'then',
  'than',
  'if',
  'not',
  'no',
  'yes',
  'you',
  'your',
  'we',
  'us',
  'our',
  'they',
  'them',
  'their',
  'he',
  'she',
  'his',
  'her',
  'its',
  'i',
  'me',
  'my',
  'mine',
  'do',
  'does',
  'did',
  'done',
  'up',
  'down',
  'over',
  'under',
  'again',
  'once',
  'only',
  'some',
  'many',
  'much',
  'every',
  'each',
  'all',
  '/w',
  'w/',
  'w/o',
  'w',
]);

export const normalizeTitleForKeywords = title => {
  if (!title || typeof title !== 'string') return [];

  const base = title.toLowerCase().trim();
  if (!base) return [];

  const words = base
    .replace(/[-_]/g, ' ') // convert hyphens/underscores to space
    .replace(/[^\w\s]/g, '') // remove punctuation
    .split(/\s+/) // split into words
    .filter(word => word && !STOP_WORDS.has(word));

  return Array.from(new Set([base, ...words]));
};
